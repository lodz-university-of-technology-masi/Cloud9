# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: cloud9-api
custom:
  formsTableName: 'form-${self:provider.stage}'
  questionsTableName: 'Questions-${self:provider.stage}'
  solvedFormsTableName: 'SolvedForms-${self:provider.stage}'
  
provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["FormsDynamoDBTable", "Arn"] }
        - { "Fn::GetAtt": ["SolvedFormsDynamoDBTable", "Arn"] }
        - { "Fn::GetAtt": ["QuestionsDynamoDBTable", "Arn" ] }
  environment:
    FORMS_TABLE_NAME: ${self:custom.formsTableName}
    QUESTIONS_TABLE_NAME: ${self:custom.questionsTableName}
	SOLVED_FORMS_TABLE_NAME: ${self:custom.solvedFormsTableName}


package:
  artifact: 'target/${self:service}-${self:provider.stage}.jar'

functions:
  hello:
    handler: com.serverless.Handler
    events:
      - http:
          path: /test/
          method: get
  
  listForm:
    handler: com.serverless.ListFormHandler
    events:
      - http:
          path: /forms
          method: get
  getForm:
    handler: com.serverless.GetFormHandler
    events:
      - http:
          path: /forms/{id}
          method: get
  createForm:
    handler: com.serverless.CreateFormHandler
    events:
      - http:
          path: /forms
          method: post
  updateForm:
    handler: com.serverless.ModifyFormHandler
    events:
      - http:
          path: /forms
          method: put
  deleteForm:
    handler: com.serverless.DeleteFormHandler
    events:
      - http:
          path: /forms/{id}
          method: delete
  addFormUser:
    handler: com.serverless.AddFormUserHandler
    events:
     - http:
          path: /forms/users/{id}
          method: post
  getFormUsers:
    handler: com.serverless.GetFormUsersHandler
    events:
     - http:
          path: /forms/users/{id}
          method: get
  deleteFormUser:
    handler: com.serverless.DeleteFormUserHandler
    events:
     - http:
          path: /forms/users/del/{id}
          method: post
  getUserForms:
    handler: com.serverless.GetUserFormsHandler
    events:
     - http:
          path: /forms/users/user/{id}
          method: get
          
  listSolvedForm:
    handler: com.serverless.ListSolvedFormHandler
    events:
      - http:
          path: /solvedForms
          method: get
  createSolvedForm:
    handler: com.serverless.CreateSolvedFormHandler
    events:
      - http:
          path: /solvedForms
          method: post 
  createQuestion:
    handler: QuestionHandlers.CreateQuestionHandler
    events:
      - http:
          path: /question
          method: post
  getQuestion:
    handler: QuestionHandlers.GetQuestionHandler
    events:
      - http:
          path: /question/{id}
          method: get
  listQuestion:
    handler: QuestionHandlers.ListQuestionHandler
    events:
      - http:
          path: /question
          method: get
  listFormQuestion:
    handler: QuestionHandlers.ListFormQuestionsHandler
    events:
      - http:
          path: /formquestion/{formid}
          method: get
  listRecruiterQuestion:
    handler: QuestionHandlers.GetRecruiterQuestionsHandler
    events:
      - http:
          path: /recruiterquestion/{recruiterid}
          method: get
  deleteQuestion:
    handler: QuestionHandlers.DeleteQuestionHandler
    events:
      - http:
          path: /question/{id}
          method: delete
  updateQuestion:
    handler: QuestionHandlers.ModifyQuestionHandler
    events:
      - http:
          path: /questionmodify
          method: put 
          
resources:
  Resources:
    FormsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.formsTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
          
    QuestionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.questionsTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    SolvedFormsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.solvedFormsTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
