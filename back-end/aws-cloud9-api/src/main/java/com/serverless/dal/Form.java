package com.serverless.dal;


import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import java.util.Map;
import java.util.HashMap;
import java.time.LocalDate;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.fasterxml.jackson.databind.JsonNode;


public class Form {
 private String description;
	 // time to fill the form in minutes
	 private int time;
	 
	 private Logger logger = LogManager.getLogger(this.getClass());
	
	 private String id;
	 private String name;
	 private String creationDate;
   private Map<String,String> users;
    public Form() {
		logger.info("Call Form::constructor");
		this.id = null;
		this.name = null;
		this.description = null;
		this.time = 0;
		this.creationDate = null;
		this.users = new HashMap<String,String>();
    }
     public Form(JsonNode body) {
		 	logger.info("Call Form constructor(JsonNode)");
			this.name = body.get("name").asText();
			this.description = body.get("description").asText();
			this.time = body.get("time").asInt();
			this.creationDate = this.getCurrentTimeString();
			this.users = new HashMap<String,String>();
		}
	
	 
	 public void update(JsonNode body) {
		 logger.info("Call Form::update(" + body + ")");
		 JsonNode newName = body.get("name");
		 JsonNode newDescription = body.get("description");
		 JsonNode newTime = body.get("time");
		 
		 if(newName != null) {
			 this.setName(newName.asText());
		 }
		 else {
			 logger.warn("Name is null");
		 }
		 
		 if(newDescription != null) {
			 this.setDescription(newDescription.asText());
		 }
		 else {
			 logger.warn("Description is null");
		 }
		 
		 if(newTime != null) {
			 this.setTime(newTime.asInt());
		 }
		 else {
			 logger.warn("Time is null");
		 }
	 }
	 
	 	@DynamoDBHashKey(attributeName = "id")
	    @DynamoDBAutoGeneratedKey
	    public String getId() {
	 		logger.info("Call Form::getId() -> " + this.id);
	 		return this.id;
	    }
	 	
	    public void setId(String id) {
	    	logger.info("Call Form::setId(" + id + ")");
	        this.id = id;
	    }

	    @DynamoDBAttribute(attributeName = "name")
	    public String getName() {
	    	logger.info("Call Form::getName() -> " + this.name);
	    	return this.name;
	    }
	    
	    public void setName(String name) {
	    	logger.info("Call Form::setName(" + name + ")");
	    	this.name = name;
	    }

	    @DynamoDBAttribute(attributeName = "creationDate")
	    public String getCreationDate() {
	    	logger.info("Call Form::getCreationDate() -> " + this.creationDate);
	    	return this.creationDate;
	    }
	    
	    @DynamoDBAttribute(attributeName = "description")
	    public String getDescription() {
	    	logger.info("Call Form::getDescription() -> " + this.description);
	    	return this.description;
	    }
	    
	    public void setCreationDate(String creationDate) {
	    	logger.info("Call Form::setCreationDate(" + creationDate + ")");
	    	this.creationDate = creationDate;
	    }
	    
	    public void setDescription(String description) {
	    	logger.info("Call Form::setDescription(" + description + ")");
	    	this.description = description;
	    }
	    
	    @DynamoDBAttribute(attributeName = "time")
	    public int getTime() {
	    	logger.info("Call Form::getTime() -> " + this.time);
	    	return this.time;
	    }
	    
	    public void setTime(int time) {
	    	logger.info("Call Form::setTime(" + time + ")");
	    	this.time = time;
	    }
	    
	    private String getCurrentTimeString() {
	    	return LocalDate.now().toString();
	    }
	    
      @DynamoDBAttribute(attributeName = "users")
	    public void addUsers(String userID, String recruiterID) {
	    	users.put(userID,recruiterID);
	    }
	    
	    public boolean deleteUsers(String userID) {
	    	if(users.remove(userID) == null) {
	    		return false;
	    	}
	    	else
	    		return true;
	    }
	    
	    public boolean findUser(String userID) {
	    	return users.containsKey(userID);
	    }
	    
	    public void setUsers(Map<String,String> users) {
	    	this.users = users;
	    }
	    
	    public Map<String,String> getUsers(){
	    	return this.users;
	    }
	    
	    @Override
		public String toString() {
			return "Form [id=" + this.getId() + ", name()=" + this.getName() + ", creationDate()=" + this.getCreationDate() + 
					", description()" + this.getDescription() + ", time=" + this.getId() + "]";
	    }
      
}
